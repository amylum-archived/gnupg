name 'gnupg'
org 'amylum'

deps(
  'libgpg-error': {
    version: '1.35-1',
    checksum: '1930a9879a364751e2486ee796d8c081b3a5307aa1e70f5b84e15b612b9d120b'
  },
  libassuan: {
    version: '2.5.3-1',
    checksum: '01e48328f1d2442d8a06ed1890b3a642f73f6f56345ec59be9a989adea801cd8'
  },
  libgcrypt: {
    version: '1.8.4-3',
    checksum: 'cba0374ab9b02dd769a2fc2da5fea576a35f018f8403d0ae80657414f3db8e30'
  },
  libksba: {
    version: '1.3.5-17',
    checksum: '8b51f2d2bba92121b4b6c7cb8fc8a68ca4c958d559a41b03caa7b1cbc1054bc3'
  },
  npth: {
    version: '1.6-1',
    checksum: 'fb3e154ac5ed95bd894a73f5c0f61887ecb1ea33ab61a8bf627a345cde7b0b70'
  },
  gnutls: {
    version: '3.6.5-2',
    checksum: 'e13e1d616d6dc4be1c315d7b3d5f2b1e422d448fa33828b6c00d48fc2802efcb'
  },
  gmp: {
    version: '6.1.2-1',
    checksum: '12515de758fa11b2b3d87b347d0593fc8bde37b32a6c609cbddd09473e180b08'
  },
  nettle: {
    version: '3.4.1-1',
    checksum: 'bde793b4551aa928a8fee81e598a18376a7ab157e59e1c17e232d876f1aac4e8'
  },
  libtasn1: {
    version: '4.13-1',
    checksum: 'fd245952c05c8d3b7fd5b56c920c05c91e9e05a5aec9f83eb109d21d15684345'
  },
  'p11-kit': {
    version: '0.23.15-1',
    checksum: '81ce051adc784304800b606f5bb529b8858dfde7ff3cde053d929a9e90df3ba7'
  },
  zlib: {
    version: '1.2.11-6',
    checksum: '7da7212123edac6d5d5dc2db8fb10a6af06472578840c51e489e1f391b66c208'
  },
  sqlite: {
    version: '3.27.2-1',
    checksum: '5a86342304279998bdc0fd05d204cbcf936d99af0656d5d6c68d30422ca3d63c'
  },
  libunistring: {
    version: '0.9.10-1',
    checksum: '270e10a91478e7d3174cf03ffdc22f508276c784fa6228d5935347d90236319c'
  },
  libidn: {
    version: '1.35-1',
    checksum: '5644f6622d77ca173e0f470b941d241ce1fc2e2cdac764e2eb20e6d24d07bfcf'
  }
)

configure_flags(
  prefix: '/usr',
  sbindir: '/usr/bin',
  libexecdir: '/usr/lib/gnupg',
  'enable-maintainer-mode': nil,
  host: 'x86_64-unknown-linux-gnu',
)

cflags
libs %w(tasn1 hogweed nettle p11-kit z gmp idn unistring)
harden

licenses 'COPYING'

build do
  run 'sed -i "s/beta=yes/beta=no/" autogen.sh'
  run './autogen.sh'
  run 'autoconf'
  configure
  [
    'gnupg-module-overview.pdf',
    'gnupg-module-overview.png',
    'gnupg-card-architecture.png',
    'gnupg-card-architecture.pdf'
  ].each { |x| FileUtils.touch('doc/' + x ) }
  make
  install
end

test do
  run 'gpg --version'
end
