name 'gnupg'
org 'amylum'

deps(
  'libgpg-error': {
    version: '1.33-1',
    checksum: '5ea72a6eb04e3048885ae43fe2bbc1090c66946e861b10a5a868787172997721'
  },
  libassuan: {
    version: '2.5.2-2',
    checksum: '3f6361f4404e110eb416a5274e00c2c97107370e348e0c1490bb9e56cfe19d9d'
  },
  libgcrypt: {
    version: '1.8.4-2',
    checksum: 'b39823c306f2fdacaaa4ce8700c41c6b534d3ace1dc5f3994ae908247d144900'
  },
  libksba: {
    version: '1.3.5-16',
    checksum: 'ac63c9c89436b0308abe6164d26364819122597309c8ec40e28265d39dc03ef5'
  },
  npth: {
    version: '1.6-1',
    checksum: 'fb3e154ac5ed95bd894a73f5c0f61887ecb1ea33ab61a8bf627a345cde7b0b70'
  },
  gnutls: {
    version: '3.6.5-2',
    checksum: 'e13e1d616d6dc4be1c315d7b3d5f2b1e422d448fa33828b6c00d48fc2802efcb'
  },
  gmp: {
    version: '6.1.2-1',
    checksum: '12515de758fa11b2b3d87b347d0593fc8bde37b32a6c609cbddd09473e180b08'
  },
  nettle: {
    version: '3.4.1-1',
    checksum: 'bde793b4551aa928a8fee81e598a18376a7ab157e59e1c17e232d876f1aac4e8'
  },
  libtasn1: {
    version: '4.13-1',
    checksum: 'fd245952c05c8d3b7fd5b56c920c05c91e9e05a5aec9f83eb109d21d15684345'
  },
  'p11-kit': {
    version: '0.23.14-1',
    checksum: 'f69d58355abbf861d43e8d0ecf0af645eefda53f15f540c5abdc2facbcf22dca'
  },
  zlib: {
    version: '1.2.11-6',
    checksum: '7da7212123edac6d5d5dc2db8fb10a6af06472578840c51e489e1f391b66c208'
  },
  sqlite: {
    version: '3.26.0-1',
    checksum: '26c48b630c923d72e76bc6e3790d8d30778f010578686ce23ba4bbfad55e8948'
  },
  libunistring: {
    version: '0.9.10-1',
    checksum: '270e10a91478e7d3174cf03ffdc22f508276c784fa6228d5935347d90236319c'
  },
  libidn: {
    version: '1.35-1',
    checksum: '5644f6622d77ca173e0f470b941d241ce1fc2e2cdac764e2eb20e6d24d07bfcf'
  }
)

configure_flags(
  prefix: '/usr',
  sbindir: '/usr/bin',
  libexecdir: '/usr/lib/gnupg',
  'enable-maintainer-mode': nil,
  host: 'x86_64-unknown-linux-gnu',
)

cflags
libs %w(tasn1 hogweed nettle p11-kit z gmp idn unistring)
harden

licenses 'COPYING'

build do
  run 'sed -i "s/beta=yes/beta=no/" autogen.sh'
  run './autogen.sh'
  run 'autoconf'
  configure
  [
    'gnupg-module-overview.pdf',
    'gnupg-module-overview.png',
    'gnupg-card-architecture.png',
    'gnupg-card-architecture.pdf'
  ].each { |x| FileUtils.touch('doc/' + x ) }
  make
  install
end

test do
  run 'gpg --version'
end
